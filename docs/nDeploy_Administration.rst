Administration of nDeploy plugin
=================================

As a server administrator the following scripts are available for administration of the nDeploy plugin
All tools are to be used from commandline as root

Layer7(Application layer) DDOS mitigation
-----------------------------------------

::

  To mitigate
  /opt/nDeploy/scripts/ddos_mitigate.sh enable

  To return config to normal mode
  /opt/nDeploy/scripts/ddos_mitigate.sh disable

Automatic fixing of most errors
--------------------------------

The following script rebuilds all config and restarts backend app servers

  ``/opt/nDeploy/scripts/attempt_autofix.sh``

Managing default config for nginx vhosts
-----------------------------------------

The default config generation in nDeploy is governed by
::

  /opt/nDeploy/conf/domain_data.yaml.tmpl    ===> For non-SSL domains
  /opt/nDeploy/conf/domain_data_SSL.yaml.tmpl   ==> for SSL domains

It is set to PROXY to httpd and PROXY to httpd_SSL

You can change that behavior by creating the same filename ending in .local
::

  cp -p /opt/nDeploy/conf/domain_data_SSL.yaml.tmpl /opt/nDeploy/conf/domain_data_SSL.yaml.tmpl.local
  cp -p /opt/nDeploy/conf/domain_data.yaml.tmpl /opt/nDeploy/conf/domain_data.yaml.tmpl.local

  change profile: '1000'   to profile: '1005' in /opt/nDeploy/conf/domain_data.yaml.tmpl.local
  change profile: '1004'   to profile: '1006' in /opt/nDeploy/conf/domain_data_SSL.yaml.tmpl.local

  rm -f /opt/nDeploy/domain-data/*   #will remove all domain-data files

  for CPANELUSER in $(cat /etc/domainusers|cut -d: -f1)
      do
          echo "ConfGen:: $CPANELUSER" && /opt/nDeploy/scripts/generate_config.py $CPANELUSER
      done
      service nginx restart

Similar to above ;if you change the backend to PHP and use Wordpress template;
all your domain will be served by nginx+php-fpm bypassing apache .
Of course, all your web apps must be WordPress in such cases .

Automatic selection of template based on application detection
---------------------------------------------------------------

The following script can detect the application installed in the webroot(only!) based on filenames

While cPanel users can always change the vhost configuration for nginX
anytime from their cPanel login
sometimes the server administrator want to automatically switch supporting applications
to be directly served by nginX instead of apache.

  ``/opt/nDeploy/scripts/auto_config.py CPANELUSER``

does this.

The script works by checking the presence of certain files like for example the wp-config.php in case of wordpress and switches the profile accordingly
::

  root@cpanel [~]# cat /opt/nDeploy/conf/appsignatures.yaml
  SSLREDIRECT: "1"
  PHP:
    '/wp-config.php': '5001'
    '/libraries/joomla/version.php': '5002'
    '/sites/default/settings.php': '5017'
    '/app/etc/local.xml': '5003'


Admin can update the appsignatures.yaml file with file names and the corresponding
profile that auto_config.py switch the domain to if the file exists.
The default list provided by us is not extensive.
Admins can also remove entries from the file above to negate auto-switching should there be a need for it . SSLREDIRECT is a switch that can have value 0 or 1 and if it is set to 1 .All the non-ssl vhost conf generated by Nginx will have the redirect http to https template .
The file

  ``/opt/nDeploy/conf/auto_config.exclude``

if present and contain the CPANELUSERNAME in it will prevent auto switching of profiles
for any domain (addon,subdomain etc) of the cpanel user.
This is useful while running the auto_config script in a for loop over a list of
cpanel users and if the script should omit any user.
To make this all work
::

  1. Edit /opt/nDeploy/conf/appsignatures.yaml . Add or remove filenames (relative to document root) and the corresponding profile names to switch to should the file be present in document root

  2. set SSLREDIRECT to 0 or 1 depending on how you want the non-ssl vhost to behave .We recommend the value be set to 1 as https:// is the norm of the modern world and redirecting non-ssl domains to ssl ones are good.

  3.Create a file named /opt/nDeploy/conf/auto_config.exclude and add any cpanelusername for which you wish to exclude auto_config. If the file is not present or is empty ;no user is excluded

  4.run

  for CPANELUSER in $(cat /etc/domainusers|cut -d: -f1)
      do
          echo "Auto ConfGen:: $CPANELUSER" && /opt/nDeploy/scripts/auto_config.py $CPANELUSER
      done
      service nginx restart

The first time auto_config.py runs it will ask your preference of PHP version
that automatic switching should use.
On cpanel servers you can safely use the same version as the default installed PHP
as most of your domains will be running that version without issues

A very IMPORTANT thing to note here is that auto_config.py is doing an educated guess work
and determining the application that is installed .
It MAY NOT! be always accurate . The administrator must be aware of this .
Of course, any change made by the auto_config can be reverted by the end user
or the admin from the cPanel plugin UI.

Providing more config templates or profiles
--------------------------------------------

To avoid clashes between user defined template and rpm provided ones . the following numbers will be reserved for user defined templates
::

  N600 -N999
  9000 - 10000

Where N is an integer . So, for example, the rpm provided templates will never use the range 2600 - 2999
New config templates can be provided to end users by the admin by simply adding
a file with all the location blocks, rewrite rules etc for an application .

The default template files can be found in
::

  root@web [~]# ls -l /opt/nDeploy/conf/*.tmpl
  -rw-r--r-- 1 root root   596 Jun 26 04:42 /opt/nDeploy/conf/1000.tmpl
  -rw-r--r-- 1 root root  1452 Jun 26 04:42 /opt/nDeploy/conf/1001.tmpl
  -rw-r--r-- 1 root root   148 Jun 26 04:42 /opt/nDeploy/conf/2001.tmpl
  -rw-r--r-- 1 root root   152 Jun 26 04:42 /opt/nDeploy/conf/3001.tmpl
  -rw-r--r-- 1 root root   152 Jun 26 04:42 /opt/nDeploy/conf/4001.tmpl
  -rw-r--r-- 1 root root   210 Jun 26 04:42 /opt/nDeploy/conf/4002.tmpl
  -rw-r--r-- 1 root root   359 Jun 26 04:42 /opt/nDeploy/conf/5001.tmpl
  -rw-r--r-- 1 root root   806 Jun 26 04:42 /opt/nDeploy/conf/5002.tmpl
  -rw-r--r-- 1 root root  1810 Jun 26 04:42 /opt/nDeploy/conf/5003.tmpl

Each programming language should begin with a specific number ( eg: 5xxx for PHP ) for clarity purpose

You can easily base a new template on an existing template by adding or removing new location blocks, rewrite rules etc

Once a template file is added in /opt/nDeploy/conf/ .

It needs to be registered using the following command which is an example of how we registered the Magento template
::

  root@web [~]# /opt/nDeploy/scripts/update_profiles.py -h
  usage: update_profiles.py [-h]
                            backend_category profile_code
                            profile_description_in_doublequotes

  Register a nginX config profile for nDeploy

  positional arguments:
    backend_category
    profile_code
    profile_description_in_doublequotes

  optional arguments:
    -h, --help            show this help message and exit

  root@web [~]# /opt/nDeploy/scripts/update_profiles.py PHP 5003 "Magento"

Upgrading nDeploy and nginx
----------------------------

nDeploy-nginx is mated with a phusion passenger ruby gem .
So we don't encourage unmanned upgrades and have therefore set enable=0 in the yum repository .
The upgrade must be done manually by running the following commands
::

  yum -y install https://github.com/AnoopAlias/nDeploy/raw/master/nDeploy-release-centos-1.0-3.noarch.rpm
  yum --enablerepo=ndeploy install nginx-nDeploy nDeploy
  #For setups using Phusion Passenger app server
  /usr/nginx/scripts/nginx-passenger-setup.sh
  #For upgrading PHP application server(additional packages are to upgraded via yum)
  /opt/nDeploy/scripts/easy_php_setup.sh

Temporarily disable the plugin
-------------------------------

  ``/opt/nDeploy/scripts/cpanel-nDeploy-setup.sh disable``

Uninstall the plugin
---------------------

::

  /opt/nDeploy/scripts/cpanel-nDeploy-setup.sh disable
  yum remove nginx-nDeploy nDeploy

Building nginx-nDeploy from source
-----------------------------------

nDeploy is a collection of scripts and contains no binary file.
nginx-nDeploy is distributed as a binary application .

While using the nDeploy RPM repository is the easiest and fastest way to get nDeploy on your server . You may sometimes wish to compile your own RPM's

The reason why one may wish to do this is

1. Add /extend nginX with more plugins
2. If you don't trust the nginX binary compiled on our server.
3. You notice an error and wish to debug nginX . https://www.nginx.com/resources/wiki/start/topics/tutorials/debugging/ , which requires that you compile Nginx with the â€“with-debug flag .
4. For the fun (and knowledge) of doing it

The instructions for creating your own nginX rpms are listed below. Run the following on your cPanel server
::

  git clone https://github.com/AnoopAlias/nDeploy.git
  cd nDeploy/rpm_buildtree/
  #Open nDeploy-nginx_build_script.sh (for CentOS6 rpm) or nDeploy-nginx_build_script.centos7.sh (centos7) in a text editor
  #The line starting with ./configure --prefix=/etc/nginx
  #is what you have to modify to add or remove configure arguments
  # comment out the line rsync -av nginx-nDeploy-* root@rpm.piserve.com:/home/rpmrepo/public_html/CentOS/7/x86_64
  root@cpanel [~/nDeploy/rpm_buildtree]# ./nDeploy-nginx_build_script.centos7.sh

  It will take some time to build . Once this is complete you will have the nginx-nDeploy rpm inside nginx-pkg-64-centos7/ (for centos7)
  or nginx-pkg-64/ (centos6) folder . which you can install using rpm -Uvh command


.. disqus::
